#!/usr/bin/env bash

script_dir=$(dirname "${BASH_SOURCE[0]}")
. "$script_dir/exec-env"

GREEN=$'\e[0;32m'
BROWN=$'\e[0;33m'
RED=$'\e[0;31m'
RESET=$'\e[0m'

print_color() {
  local color="$1"
  local message="$2"
  printf "%s%s%s\n" "$color" "$message" "$RESET"
}

print_green() { print_color "$GREEN" "$1"; }
print_brown() { print_color "$BROWN" "$1"; }
print_red() { print_color "$RED" "$1"; }

ask_user() {
  local question="$1"
  local defaults="$2"
  local answer

  if [[ -z $defaults ]]; then
    read -r -p "$question [Y/n]" answer >&3
    case $answer in
    [yY]) answer="yes" ;;
    *) answer="no" ;;
    esac
  else
    printf "%s" "$question y/n/[$BROWN$defaults$RESET]" >&3
    read -r answer
    case $answer in
    [yY]) answer="yes" ;;
    [nN]) answer="no" ;;
    *) answer="default" ;;
    esac
  fi

  printf %s "$answer"
}

read_options_file() { [[ -f $1 ]] && tr '\n' ' ' <"$1" | sed 's/ $//'; }

get_options() {
  local option_name="$1"
  local default_options_file_path="$2"
  local default_options
  local options
  default_options=$(read_options_file "$default_options_file_path")
  answer=$(ask_user "Define specific $option_name(s) to install?" "$default_options")

  case "$answer" in
  "yes") read -r -p "Enter $option_name(s) (${option_name}1 ${option_name}2 ...): " options >&3 ;;
  "no") options="" ;;
  *) options="$default_options" ;;
  esac

  printf %s "$options"
}

install_rust() {
  local default_rust_components="${ASDF_RUST_DEFAULT_COMPONENTS_FILE:=$HOME/.default-rust-components}"
  local default_rust_targets="${ASDF_RUST_DEFAULT_TARGETS_FILE:=$HOME/.default-rust-targets}"
  local components
  local targets

  exec 3>/dev/tty
  components=$(get_options "component" "$default_rust_components")
  targets=$(get_options "target" "$default_rust_targets")
  exec 3>&-

  printf "Installing Rust\n%s\n%s\n" \
    "${components:+with components: ${BROWN}$components${RESET}}" \
    "${targets:+with targets: ${BROWN}$targets${RESET}}"

  curl --fail --silent --show-error https://sh.rustup.rs |
    sh -s -- -y --no-modify-path \
      --default-toolchain "$ASDF_INSTALL_VERSION" \
      --profile "${ASDF_RUST_PROFILE:-default}" \
      ${components:+--component $components} \
      ${targets:+--target $targets}
}

install_cargo_crate() {
  printf "\n%s%s%s\n" "Installing " "$(print_brown "$1")" " cargo crate..."
  PATH="$ASDF_INSTALL_PATH/bin:$PATH" cargo install "$@" >/dev/null && rc=$? || rc=$?

  [[ $rc -ne 0 ]] && print_red "FAILED"
  print_green "SUCCESS"
}

install_default_cargo_crates() {
  local default_cargo_crates="${ASDF_CRATE_DEFAULT_PACKAGES_FILE:=$HOME/.default-cargo-crates}"

  [[ ! -f $default_cargo_crates ]] && return

  while IFS= read -r line; do
    name=$(echo "$line" |
      sed 's|\(.*\) //.*$|\1|' |      # handle comments after crate name
      sed -E 's|^[[:space:]]*//.*||') # handle full line comments

    [[ -z $name ]] && continue
    local args=()
    IFS=' ' read -r -a args <<<"$line"
    install_cargo_crate "${args[@]}"

  done <"$default_cargo_crates"
}

main() {
  install_rust
  install_default_cargo_crates
}

main
